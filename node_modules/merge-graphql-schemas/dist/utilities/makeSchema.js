'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeSchema = exports.mergeableTypes = undefined;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _graphql = require('graphql');

var _astHelpers = require('./astHelpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const typesMap = {
  query: 'Query',
  mutation: 'Mutation',
  subscription: 'Subscription'
};

const _mergeableOperationTypes = (0, _keys2.default)(typesMap);

const _makeOperationType = (operation, value) => ({
  kind: _graphql.Kind.OPERATION_TYPE_DEFINITION,
  operation: operation,
  type: {
    kind: _graphql.Kind.NAMED_TYPE,
    name: {
      kind: _graphql.Kind.NAME,
      value: value
    }
  }
});

const mergeableTypes = (0, _values2.default)(typesMap);

const makeSchema = (definitions, schemaDefs) => {
  const operationMap = {
    query: _makeOperationType(_mergeableOperationTypes[0], mergeableTypes[0]),
    mutation: null,
    subscription: null
  };

  mergeableTypes.slice(1).forEach((type, key) => {
    if ((0, _astHelpers.hasDefinitionWithName)(definitions, type)) {
      const operation = _mergeableOperationTypes[key + 1];

      operationMap[operation] = _makeOperationType(operation, type);
    }
  });

  const operationTypes = (0, _values2.default)(operationMap).map((operation, i) => {
    if (!operation) {
      const type = (0, _keys2.default)(operationMap)[i];

      if (schemaDefs.some(def => def.operationTypes.some(op => op.operation === type))) {
        return _makeOperationType(type, typesMap[type]);
      }
    }

    return operation;
  }).filter(op => op);

  return {
    kind: _graphql.Kind.SCHEMA_DEFINITION,
    directives: [],
    operationTypes: operationTypes
  };
};

exports.mergeableTypes = mergeableTypes;
exports.makeSchema = makeSchema;